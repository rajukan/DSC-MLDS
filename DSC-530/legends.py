from collections import defaultdict

import pandas as pd
#https://www.dontusethiscode.com/blog/2023-05-03-lose_the_legend.html

from numpy import array, arange
from numpy.random import default_rng
from pandas import DataFrame, date_range, MultiIndex

pd.set_option('display.max_columns', 500)
pd.options.display.width = 0

rng = default_rng(0)
p = 91

data = array([
    [10, 12, 14, 14, 15, 17, 19, 18, 20],
    [10,  9, 10,  9,  9,  8,  9, 10, 11],
    [4,   4,  5,  5,  6,  5,  4,  3,  2],
    [3,   2,  2,  2,  3,  2,  2,  2,  4],
    [6,   7,  8,  8,  9, 10,  5,  8,  9],
    [6,   7,  8,  6,  7,  7,  7,  7,  7],
    [9,   8,  7,  5,  6,  6,  5,  5,  3],
    [6,   7,  8,  8,  9, 10,  5,  8,  9],
]).T

data += arange(data.shape[1]) * 5

index = MultiIndex.from_product([[*range(data.shape[0])], [*range(p)]])
columns = [
    'agriculture', 'furniture', 'software', 'hardware', 'games',
    'office supplies', 'cloud services', 'cosmetics',
]
df = (
    DataFrame(data, columns=columns)
    .reindex(index, level=0)
    .add(rng.normal(0, 2, size=(len(index), data.shape[1])))
    .div(p)
    .pipe(lambda d:
          d.set_axis(date_range('2000', freq='D', periods=len(d)))
          )
    .mul(100)
)

print(df.head())
plotting_df = df.rolling('7D').mean()

def graph_1():
    import matplotlib.pyplot as plt
    from matplotlib.pyplot import rc
    rc('font', size=24)
    rc('figure', facecolor='white')

    ax = plotting_df.plot(legend=False, figsize=(20, 10), lw=3)
    ax.legend(loc='center left', bbox_to_anchor=(1, .5))
    ax.yaxis.set_major_formatter(lambda x, pos: f'${x:g}M')
    ax.set_title('Revenue Generated by Department', size='x-large', loc='left', pad=20)
    plt.show()

def plot_matlb():
    import matplotlib.pyplot as plt
    from matplotlib.pyplot import rc
    from collections import defaultdict
    from matplotlib.pyplot import subplots, close
    from matplotlib.dates import AutoDateLocator, ConciseDateFormatter
    from matplotlib.patheffects import Normal, Stroke

    rc('axes.spines', right=False, top=False)

    fig, ax = subplots(figsize=(20, 10))
    offsets = defaultdict(lambda: (0, 0), {'office supplies': (0, -5), 'games': (0, -5)})

    for col in plotting_df.columns:
        line, = ax.plot(plotting_df.index, plotting_df[col], label=col, lw=3)

        # the last row contains the coordinates we want to add our text by
        last_row = plotting_df.iloc[-1]
        offx, offy = offsets[col] # use offsets to move labels so they do not overlap
        ax.annotate(
            text=col,
            xy=(last_row.name, last_row[col]), # annotate this point on our plot
            xytext=(offx + 4, offy),             # offset our label in the x/y direction
            textcoords='offset points',         # informs the offset what the units mean
            ha='left', va='center',
            color=line.get_color(),            # label color matches line color
            path_effects=[  # add a slight outline to pop on light backgrounds
                Stroke(linewidth=.1, foreground='k'), Normal()
            ]
        )

    # no padding in data on the x-axis
    ax.margins(x=0)

    # make our ticks/tick labels nicer → slightly surprised pandas did this by default
    locator = AutoDateLocator()
    formatter = ConciseDateFormatter(
        locator, zero_formats=['', '%b\n%Y', '%b', '%b-%d', '%H:%M', '%H:%M']
    )
    ax.xaxis.set_major_locator(locator)
    ax.xaxis.set_major_formatter(formatter)
    ax.yaxis.set_major_formatter(lambda x, pos: f'${x:g}M')
    ax.set_title('Revenue Generated by Department', size='x-large', loc='left', pad=20)
    plt.show()

def plot_matlb_multpl():
    from matplotlib.pyplot import rc
    from matplotlib.pyplot import subplots, close
    from matplotlib.dates import AutoDateLocator, ConciseDateFormatter
    from matplotlib import colormaps
    from math import ceil

    rc('axes.spines', right=False, top=False)
    rc('font', size=12)

    ncols = 3
    nrows = ceil(df.columns.size / ncols)
    fig, axes = subplots(
        nrows=nrows, ncols=ncols,
        figsize=(14, 10), sharex=True, sharey=True
    )

    # when possible, small multiples should have some sort of ordering
    order = plotting_df.mean().sort_values(ascending=False).index

    # preserve categorical color mapping for future use
    colors = dict(zip(order, colormaps['tab10'].colors))

    for i, (ax, label) in enumerate(zip(axes.flat, order)):
        ax.plot(
            plotting_df.index, plotting_df.drop(columns=label),
            color='gainsboro'
        )
        ax.plot(plotting_df.index, plotting_df[label], color=colors[label], lw=2)
        ax.set_title(label.title(), size='x-large', color=colors[label])

    # 'remove' axes that did not have data plotted on them
    for ax in axes.flat[i+1:]:
        ax.axis('off')

    # the axes above the 'removed' ones display their bottom ticks/labels
    if nrows > 1:
        for ax in axes[-2, i + 1 - axes.size:].flat:
            ax.xaxis.set_tick_params(bottom=True, labelbottom=True)

    # label the top of all axes, little noisier but lessens the label gap
    for ax in axes[0, :]:
        ax.xaxis.set_tick_params(top=True, labeltop=True)

    # since x/y axis are shared across all Axes, changing options on 1 Axes
    #   changes the options on all other Axes
    ax.margins(x=0)
    locator = AutoDateLocator()
    formatter = ConciseDateFormatter(
        locator, zero_formats=['', '%b\n%Y', '%b', '%b-%d', '%H:%M', '%H:%M']
    )
    ax.xaxis.set_major_locator(locator)
    ax.xaxis.set_major_formatter(formatter)
    fig.suptitle('Small Multiples Circumvents need for Legend', size='xx-large')
    fig.tight_layout()
    fig.show()


def panda_inline_labels():
    import matplotlib.pyplot as plt
    from matplotlib.dates import AutoDateLocator, ConciseDateFormatter
    from matplotlib.patheffects import Stroke, Normal

    ax = plotting_df.plot(legend=False, figsize=(12, 8))
    offsets = defaultdict(lambda: (0, 0), {'office supplies': (0, +5), 'games': (0, -5)})

    for line in ax.lines:
        x, y = line.get_data()

        # use offsets to move labels so they do not overlap
        offx, offy = offsets[line.get_label()]

        ax.annotate(
            text=line.get_label().title(),
            xy=(x[-1], y[-1]),                 # annotate this point on our plot
            xytext=(offx + 4, offy),             # offset our label in the x/y direction
            textcoords='offset points',         # informs the offset what the units mean
            ha='left', va='center',
            color=line.get_color(),            # label color matches line color
            path_effects=[  # add a slight outline to pop on light backgrounds
                Stroke(linewidth=.1, foreground='k'), Normal()
            ]
        )

    ##
    # no padding in data on the x-axis
    ax.margins(x=0)

    # make our ticks/tick labels nicer → slightly surprised pandas did this by default
    locator = AutoDateLocator()
    formatter = ConciseDateFormatter(
        locator, zero_formats=['', '%b\n%Y', '%b', '%b-%d', '%H:%M', '%H:%M']
    )
    ax.xaxis.set_major_locator(locator)
    ax.xaxis.set_major_formatter(formatter)
    ax.set_title('Inline labels from pandas plot starting point', size='x-large')
    plt.show()


if __name__ == '__main__':
    print()
    #graph_1()
    #plot_matlb()
    #plot_matlb_multpl()
    #panda_inline_labels()

